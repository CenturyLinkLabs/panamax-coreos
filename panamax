#! /bin/bash

PANAMAX_PORT_UI=8898
PANAMAX_PORT_API=8899

function checkPreReqs {
    echo ""
    echo "Checking if required software is installed."
    echo ""
    
    git --version 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
	echo "Please install git client (http://git-scm.com/downloads)."; 
	exit 1;
    else 
	echo $'Git client installed.'
    fi
    
    vagrant -v | grep "1.5" 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
	echo "Please install vagrant version 1.5 or newer (https://www.vagrantup.com/downloads.html).";
	exit 1;
    else 
	echo $'Vagrant 1.5 or newer installed.'
    fi

    virtualbox --help 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
	echo "Please install Virtualbox (https://www.virtualbox.org/wiki/Downloads).";
	exit 1;
    else 
	echo $'Virtualbox 4.2 or newer installed.'
    fi
    echo ""
}


function installPanamax {
   
    if [[ $# == 0 ]]; then
        echo ""
        read -p "Enter default UI port($PANAMAX_PORT_UI):"  panamaxPortUi
        read -p "Enter default API port($PANAMAX_PORT_API):"  panamaxPortApi
        echo ""
    fi 
    
    panamaxPortUi=${panamaxPortUi:-$PANAMAX_PORT_UI}
    panamaxPortApi=${panamaxPortApi:-$PANAMAX_PORT_API}
    redownload=${download:-N}
    
    echo export PANAMAX_PORT_UI=$panamaxPortUi > .env
    echo export PANAMAX_PORT_API=$panamaxPortApi >> .env
    echo export VAGRANT_BOX_NAME=$BASEBOX >> .env
    echo export VAGRANT_BOX_URL='http://storage.core-os.net/coreos/amd64-usr/alpha/coreos_production_vagrant.box' >> .env

    source .env

    if [[  $operation == "reinstall" ]]; then 
        echo ""
        echo "Reinstalling the vagrant machine"
	if [[ "$#" == "0" ]]; then 
	    read -p "Would you like to re-download coreos base box(N): " redownload
	fi
        if [[ $redownload == "Y" ]]; then 
            vagrant box remove $BASEBOX || { "Vagrant box remove failed. Exiting." exit 1; }
        fi
        vagrant destroy -f || { "VM Destroy failed. Exiting." exit 1; }
        vagrant up || { "VM Creation failed. Exiting." exit 1; }
    else
	echo ""
	echo "Creating a new vagrant machine"
	vagrant up || { "VM Creation failed. Exiting." exit 1; }
    fi  
            
    openPanamax;
    exit 0;
}


function readParams {
    for i in "$@"
    do
    case $i in
        -tg=*|--target=*)
            target="${i#*=}"
	-op=*|--operation=*)
            operation="${i#*=}"
            ;;
	-ppUi=*|--panamaxPortUi=*)
            panamaxPortUi="${i#*=}"
            ;;
	-ppApi=*|--panamaxPortApi=*)
            panamaxPortApi="${i#*=}"
            ;;
	-vd=*|--vagrantDownload=*)
            download="${i#*=}"
            ;;
	*)
            showHelp;
            exit 1;
            ;;
    esac
    done
}


function openPanamax {
    echo "waiting for panamax to start....."
    until [ `curl -sL -w "%{http_code}" "http://localhost:$PANAMAX_PORT_UI"  -o /dev/null` == "200" ];
    do
      printf .
      sleep 2
    done
   
    echo ""
    open "http://localhost:$PANAMAX_PORT_UI" || { echo "Please goto http://localhost:$PANAMAX_PORT_UI"; }
    echo ""
    echo ""
}

function restartPanamax {
    source .env
    vagrant reload || { echo >&2 "Restarting panamax seems to have failed. Please try reinstall."; exit 1; }
    openPanamax;
}

function showHelp {
    echo ""
    echo "Usage: 
	 ./setup.sh -op=install [-ppUi=<panamax UI port>] [-ppApi=<panamax API port>]
	 ./setup.sh -op=reinstall [-ppUi=<panamax UI port>] [-ppApi=<panamax API port>]
	 ./setup.sh -op=restart
	 ./setup.sh "
    echo ""
}

function main {

    checkPreReqs;
    readParams "$@"
    
    if [[ $# -gt 0 ]]; then
	case $operation in
	    install) installPanamax "$@" || { showHelp; exit 1; } ;;
	    reinstall) installPanamax "$@" || { showHelp; exit 1; } ;;
	    restart) restartPanamax;;
	    *) showHelp;;
	esac
	
    else
        echo "Please select one of the following options: "
	select operation in "install" "restart" "reinstall"; do
	case $operation in 
	    install) installPanamax;;
	    reinstall   ) installPanamax;;
	    restart) restartPanamax;;
	esac
	done
    fi
}

main "$@";
