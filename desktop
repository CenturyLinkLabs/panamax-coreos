#! /bin/bash

PANAMAX_PORT_UI=8898
PANAMAX_PORT_API=8899


function checkPreReqs {
    echo ""
    echo "Checking if required software is installed."
    echo ""
    
    vagrant -v | grep "1.5" 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
	echo "Please install vagrant version 1.5 or newer (https://www.vagrantup.com/downloads.html).";
	exit 1;
    else 
	echo $'Vagrant 1.5 or newer installed.'
    fi

    virtualbox --help 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
	echo "Please install Virtualbox (https://www.virtualbox.org/wiki/Downloads).";
	exit 1;
    else 
	echo $'Virtualbox 4.2 or newer installed.'
    fi
    echo ""
}


function installPanamax {
   
    if [[ $# == 0 ]]; then
        echo ""
        read -p "Enter default UI port($PANAMAX_PORT_UI):"  panamaxPortUi
        read -p "Enter default API port($PANAMAX_PORT_API):"  panamaxPortApi
        echo ""
    fi 
    
    panamaxPortUi=${panamaxPortUi:-$PANAMAX_PORT_UI}
    panamaxPortApi=${panamaxPortApi:-$PANAMAX_PORT_API}
    redownload=${download:-N}
    
    echo export PANAMAX_PORT_UI=$panamaxPortUi > .env
    echo export PANAMAX_PORT_API=$panamaxPortApi >> .env
    echo export VAGRANT_BOX_NAME=$BASEBOX >> .env
    echo export VAGRANT_BOX_URL='http://storage.core-os.net/coreos/amd64-usr/alpha/coreos_production_vagrant.box' >> .env

    source .env

    if [[  $operation == "reinstall" ]]; then 
        echo ""
        echo "Reinstalling the vagrant machine"
	if [[ "$#" == "0" ]]; then 
	    read -p "Would you like to re-download coreos base box(N): " redownload
	fi
        if [[ $redownload == "Y" ]]; then 
            vagrant box remove $BASEBOX || { "Vagrant box remove failed. Exiting." exit 1; }
        fi
        vagrant destroy -f || { "VM Destroy failed. Exiting." exit 1; }
        vagrant up || { "VM Creation failed. Exiting." exit 1; }
    else
	echo ""
	echo "Creating a new vagrant machine"
	vagrant up || { "VM Creation failed. Exiting." exit 1; }
    fi  
            
    openPanamax;
}


function readParams {
    for i in "$@"
    do
    case $i in
	-op=*|--operation=*)
	operation="${i#*=}"
	;;
	-ppUi=*|--panamaxPortUi=*)
	panamaxPortUi="${i#*=}"
	;;
	-ppApi=*|--panamaxPortApi=*)
	panamaxPortApi="${i#*=}"
	;;
	-vd=*|--vagrantDownload=*)
	download="${i#*=}"
	;;
	*)
	showHelp;
	exit 1;
	;;
    esac
    done
}


function openPanamax {
    echo "waiting for panamax to start....."
    until [ `curl -sL -w "%{http_code}" "http://localhost:$PANAMAX_PORT_UI"  -o /dev/null` == "200" ];
    do
      printf .
      sleep 2
    done
   
    echo ""
    open "http://localhost:$PANAMAX_PORT_UI" || { echo "Please goto http://localhost:$PANAMAX_PORT_UI"; }
    echo ""
    echo ""
}

function restartPanamax {
    echo Restarting Panamax
    source .env
    vagrant reload || { echo >&2 "Restarting Panamax seems to have failed. Please try again using the reinstall option."; exit 1; }
    openPanamax;
    echo Restart complete
}


function stopPanamax {
    echo Stopping Panamax
    source .env
    vagrant halt || { echo >&2 "Stopping Panamax seems to have failed. Please try again using the reinstall option."; exit 1; }
    echo Panamax stopped.
}

function showHelp {
    echo ""
    echo "Usage: 
	 ./setup.sh -op=install [-ppUi=<panamax UI port>] [-ppApi=<panamax API port>]
	 ./setup.sh -op=reinstall [-ppUi=<panamax UI port>] [-ppApi=<panamax API port>]
	 ./setup.sh -op=restart
	 ./setup.sh "
    echo ""
}


function checkForUpdate {
    echo ""
    echo Checking for updates to Panamax Installer.
    currentVersion=$(<version.txt)
    majVer=`echo $currentVersion | awk -F "." '{ print $1 }'`
    minVer=`echo $currentVersion | awk -F "." '{ print $2 }'`
    patVer=`echo $currentVersion | awk -F "." '{ print $3 }'` 
    
    nextMinVer=`echo $minVer + 1 | bc`
    nextMajVer=`echo $majVer + 1 | bc`
    nextPatVer=`echo $patVer + 1 | bc`
    
    updateUrl="http://63.128.180.11/installer/"
    versionList=`curl -sL "$updateUrl"`
    echo ""
    if [[ `echo $versionList | grep "$majVer.$minVer.$nextPatVer"` != "" || `echo $versionList | grep "$majVer.$nextMinVer.$patVer"` != "" || `echo $versionList | grep "$nextMajVer.$minVer.$patVer"` != "" ]]; then
      echo "Panamax Installer version: $(<version.txt)."
      echo "*** A newer version of Panamax Installer is available! Please visit ($updateUrl) to update. ***"
   else 
      echo "Panamax Installer version: $(<version.txt)."
      echo "You are running the latest version of Panamax Installer."
   fi  
   echo ""
}

function main {

    local install="Install: First time installing Panamax - Downloads CorsOS VM and installs latest Panamax version."
    local restart="Restart: Stops and Starts Panamax."
    local reinstall="Reinstall: Deletes your applications and CoreOS VM; reinstalls latest Panamax version."
    local update="Update (not implemented): Retains your applications and updates Panamax to latest version."

    checkPreReqs;
    readParams "$@"
    
    if [[ $# -gt 0 ]]; then
	case $operation in
	    install) installPanamax "$@" || { showHelp; exit 1; } ;;
	    reinstall) installPanamax "$@" || { showHelp; exit 1; } ;;
	    restart) restartPanamax;;
            stop) stopPanamax;;
            update) checkForUpdate;;
	    *) showHelp;;
	esac
	
    else
        echo "Please select one of the following options: "
	select operation in "$install" "$restart" "$reinstall" "$update"; do
	case $operation in 
	    "$install") installPanamax; break;;
	    "$reinstall"   ) installPanamax; break;;
	    "$restart") restartPanamax; break;;
	    stop) stopPanamax; break;;
        "$update") checkForUpdate; break;;
	esac
	done
    fi
    checkForUpdate
    exit 0;
}

main "$@";
