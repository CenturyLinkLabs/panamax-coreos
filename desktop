#! /bin/bash

#PANAMAX_PORT_UI=
#PANAMAX_PORT_API=
BASEBOX=coreos-alpha
VERSION=stable
pmxUiTags="http://74.201.240.198:5000/v1/repositories/panamax-ui/tags"
pmxApiTags="http://74.201.240.198:5000/v1/repositories/panamax-api/tags"
setupUpdateUrl="http://63.128.180.11/installer/"

function checkPreReqs {
    echo ""
    echo "Checking if required software is installed."
    echo ""
    
    vagrant -v | grep "1.5" 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
	    echo "Please install vagrant version 1.5 or newer (https://www.vagrantup.com/downloads.html).";
	    exit 1;
    else 
	    echo $'Vagrant 1.5 or newer installed.'
    fi

    virtualbox --help 2>&1 >/dev/null
    if [[ "$?" -ne "0" ]]; then
        echo "Please install Virtualbox (https://www.virtualbox.org/wiki/Downloads).";
        exit 1;
    else 
    	echo $'Virtualbox 4.2 or newer installed.'
    fi
    echo ""
}

function getNextOpenPorts {
 HOST=127.0.0.1;

 for((port=8898;port<=9999;++port));do 
   if [[ "`netstat -an | grep $port`" == "" ]]; then 
      if [[ "$PANAMAX_PORT_UI" == "" ]]; then 
          PANAMAX_PORT_UI=$port
      else
         PANAMAX_PORT_API=$port
         break
      fi
   fi;
 done
}

function checkForSetupUpdate {
    if [[ -f .env ]]; then
        source .env
        majVer=`echo $SETUP_VERSION | awk -F "." '{ print $1 }'`
        minVer=`echo $SETUP_VERSION | awk -F "." '{ print $2 }'`
        patVer=`echo $SETUP_VERSION | awk -F "." '{ print $3 }'`

        nextMinVer=`echo $minVer + 1 | bc`
        nextMajVer=`echo $majVer + 1 | bc`
        nextPatVer=`echo $patVer + 1 | bc`

        versionList=`curl -sL $setupUpdateUrl | grep zip`
        if [[ "`echo $versionList | grep "$majVer.$minVer.$nextPatVer"`" != "" || "`echo $versionList | grep "$majVer.$nextMinVer.[0-9]\+"`" != "" || "`echo $versionList | grep "$nextMajVer.[0-9]\+.[0-9]\+"`" != "" ]]; then
          echo "Local Panamax Installer version:"
          echo "$SETUP_VERSION"
          echo ""
          echo "*** Panamax Installer is out of date! Please visit ($setupUpdateUrl) to update. ***"
        fi
    else
        echo "Looks like your current installation is missing some components. Please reinstall."
    fi
}

function checkForPanamaxUpdate {
   if [[ -f .env ]]; then
    source .env
    if [[ "$INSTALL_VERSION" == "dev" ]]; then
        if [[ "$INSTALL_DATE" -le "` date -j -v-1d +%s`" ]]; then
            echo "Dev versions are updated nightly. A newer version is available. Please update it."
        fi
    elif [[ "$INSTALL_TAG_UI" != "" || "$INSTALL_TAG_API" != "" ]]; then
        latestTagApi=$(getLatestTagApi)
        latestTagUi=$(getLatestTagUi)
        if [[ "$INSTALL_TAG_UI" < "$latestTagUi" || "$INSTALL_TAG_API" < "$latestTagApi" ]]; then
            echo "Local Panamax component versions:"
            echo "UI: $INSTALL_TAG_UI"
            echo "API: $INSTALL_TAG_API"
            echo "Latest Panamax component versions:"
            echo "UI: $latestTagUi" 
            echo "API: $latestTagApi"
            echo ""
            echo "*** Panamax is out of date! Please use the update option to get the latest. Release notes are available at ($setupUpdateUrl) . ***"
            echo ""
            
        elif [[ "$1" == "u" ]]; then
            echo "You are on the latest version panamax application."
        fi
    fi
  else
    echo "Looks like your current installation is missing some components. Please reinstall."
  fi
}

function checkForUpdate {
    echo ""
    checkForPanamaxUpdate
    checkForSetupUpdate
    echo ""
}

function getLatestTagUi {
    echo `curl -silent $pmxUiTags  | grep '"[0-9]\+.[0-9]\+.[0-9]\+"' | awk '{ gsub(/[",:]/,"")} 1' | awk '{ print $1}' | awk 'END{print}'`
}

function getLatestTagApi {
    echo `curl -silent $pmxApiTags  | grep '"[0-9]\+.[0-9]\+.[0-9]\+"' | awk '{ gsub(/[",:]/,"")} 1' | awk '{ print $1}' | awk 'END{print}'`
}

function installPanamax {
    if [[ $# == 0 ]]; then
        echo ""
        read -p "Enter default UI port($PANAMAX_PORT_UI):"  panamaxPortUi
        read -p "Enter default API port($PANAMAX_PORT_API):"  panamaxPortApi
        read -p "Enter version you want to use(dev/stable, defaults to:$VERSION):" panamaxVersion
        echo ""
    fi 
    
    panamaxPortUi=${panamaxPortUi:-$PANAMAX_PORT_UI}
    panamaxPortApi=${panamaxPortApi:-$PANAMAX_PORT_API}
    redownload=${download:-N}
    panamaxVersion=${panamaxVersion:-$VERSION}

    echo export PANAMAX_PORT_UI=$panamaxPortUi > .env
    echo export PANAMAX_PORT_API=$panamaxPortApi >> .env
    echo export BASEBOX=$BASEBOX >> .env
    echo export SETUP_VERSION=\"$(<version.txt)\" >> .env
    echo export INSTALL_VERSION=$panamaxVersion >> .env
    echo export INSTALL_DATE=\"`date +%s`\" >> .env
    if [[ "$panamaxVersion" == "stable" ]]; then
        echo export INSTALL_TAG_UI=\"$(getLatestTagUi)\" >> .env
        echo export INSTALL_TAG_API=\"$(getLatestTagApi)\" >> .env
    fi
    source .env

    exit 0;

    if [[  $operation == "reinstall" ]]; then 
        echo ""
        echo "Reinstalling the vagrant machine"
	if [[ "$#" == "0" ]]; then 
	    read -p "Would you like to re-download coreos base box(N): " redownload
	fi
        vagrant destroy -f || { "VM Destroy failed. Exiting." exit 1; }
        if [[ $redownload == "Y" ]]; then 
            vagrant box update --box $BASEBOX || { "Vagrant box remove failed. Exiting." exit 1; }
        else
        vagrant up || { "VM Creation failed. Exiting." exit 1; }
        fi
    else
	echo ""
	echo "Creating a new vagrant machine"
	vagrant up || { "VM Creation failed. Exiting." exit 1; }
    fi  
            
    openPanamax;
}

function openPanamax {
    echo "waiting for panamax to start....."
    until [ `curl -sL -w "%{http_code}" "http://localhost:$PANAMAX_PORT_UI"  -o /dev/null` == "200" ];
    do
      printf .
      sleep 2
    done
   
    echo ""
    open "http://localhost:$PANAMAX_PORT_UI" || { echo "Please goto http://localhost:$PANAMAX_PORT_UI"; }
    echo ""
    echo ""
}

function restartPanamax {
    echo Restarting Panamax
    source .env
    vagrant reload || { echo >&2 "Restarting Panamax seems to have failed. Please try again using the reinstall option."; exit 1; }
    openPanamax;
    echo Restart complete
}


function stopPanamax {
    echo Stopping Panamax
    source .env
    vagrant halt || { echo >&2 "Stopping Panamax seems to have failed. Please try again using the reinstall option."; exit 1; }
    echo Panamax stopped.
}

function uninstallPanamax {
  echo Uninstalling Panamax
  vagrant destroy -f
  echo Uninstall complete. 

}

function showHelp {
    echo ""
    echo "Usage: 
	 ./desktop up/-op=install [-ppUi=<panamax UI port>] [-ppApi=<panamax API port>]
	 ./desktop reinstall/-op=reinstall [-ppUi=<panamax UI port>] [-ppApi=<panamax API port>]
	 ./desktop restart/-op=restart
     ./desktop start/-op=start
     ./desktop halt/-op=stop
     ./desktop destroy/-op=uninstall
     ./desktop status/-op=status
     ./desktop "
    echo ""
}


function readParams {
    for i in "$@"
    do
    case $i in
        --dev)
        panamaxVersion=dev
        ;;
        --stable)
        panamaxVersion=stable
        ;;
        up)
        operation=install
        ;;
        destroy)
        operation=uninstall
        ;;
        halt)
        operation=stop
        ;;
        start)
        operation=restart
        ;;
        restart)
        operation=restart
        ;;
        update)
        operation=update
        ;;
        -op=*|--operation=*)
        operation="${i#*=}"
        ;;
        -ppUi=*|--panamaxPortUi=*)
        panamaxPortUi="${i#*=}"
        ;;
        -ppApi=*|--panamaxPortApi=*)
        panamaxPortApi="${i#*=}"
        ;;
        -vd=*|--vagrantDownload=*)
        download="${i#*=}"
        ;;
        *)
        showHelp;
        exit 1;
        ;;
    esac
    done
}

function main {

    local install="Install: First time installing Panamax - Downloads CorsOS VM and installs latest Panamax version."
    local restart="Restart: Stops and Starts Panamax."
    local reinstall="Reinstall: Deletes your applications and CoreOS VM; reinstalls latest Panamax version."
    local update="Update (not implemented): Retains your applications and updates Panamax to latest version."
    local stop="Stop: Stops Panamax"
    local start="Start: Starts Panamax"
    local uninstall="Uninstall: Deletes applications and CoreOS VM."

    checkPreReqs;
    readParams "$@"
    
    if [[ $# -gt 0 ]]; then
        case $operation in
            install) getNextOpenPorts; installPanamax "$@" || { showHelp; exit 1; } ;;
            reinstall) getNextOpenPorts; installPanamax "$@" || { showHelp; exit 1; } ;;
            restart) restartPanamax;;
            stop) stopPanamax;;
            start) restartPanamax;;
            update) checkForUpdate "u";;
            uninstall) uninstallPanamax;;
            *) showHelp;;
        esac
	
    else
        echo "Please select one of the following options: "
        select operation in "$install" "$stop" "$start" "$restart" "$reinstall" "$update" "$uninstall"; do
        case $operation in
            "$install") getNextOpenPorts; installPanamax; break;;
            "$reinstall") getNextOpenPorts; installPanamax; break;;
            "$restart") restartPanamax; break;;
            "$start") restartPanamax; break;;
            "$stop") stopPanamax; break;;
            "$update") checkForUpdate "u"; break;;
            "$uninstall") uninstallPanamax; break;;
        esac
        done
    fi
    exit 0;
}

main "$@";
